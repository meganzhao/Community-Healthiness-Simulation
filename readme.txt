1. Our program is a simulation of disease spread within a community. The community consists of 5000 members with 50 members in each age group from 0 to 99. We define “children” as 0 to 18, “adults” as 19 to 60, and “elderly” as 61 to 99. The user is asked to input how many days they would like to simulate. Before the first day of the simulation, one random community member is chosen as the first sick person. Each day, a random number of children go to school, a random number of adults go to the office, and a random number of community members go to the shop. Thus, a child could go both to school and the shop, an adult could go both to the office and to the shop, and any sick person could go to the hospital as well as other places. At these places, if there is at least one sick person present, every healthy person has a chance of getting sick. At the beginning of the simulation, the user decides whether each place will have a high or low probability of making the community members sick - for example, high probability gives the elderly a 75% chance of becoming sick, while low probability gives them only a 50% chance of becoming sick. Probability is different for each age group - older community members have a greater chance of getting sick than younger community members. Then, a random number of sick community members are sent to the hospital, where each sick person has a chance of becoming healthy. Again, at the beginning of the simulation, the user decides whether the hospital has a high or low probability of having its patients recover. Probability is again based on age - older community members have less chance of recovering as compared to younger community members. After all of these functions are run, the user clicks and a new day is simulated. After the number of days that the user chose is simulated, the window closes and a final screen displays the numbers of sick and healthy children, adults, and elderly people.2. Our code has three classes: Community, Simulation and GraphicInterface. Inside the class Community, it constructs a dictionary (masterDict) of all community members. The keys are ages and the values are lists of two numbers. The first number is the number of healthy people of that age and the second number is the number of sick people. We chose to use a dictionary so that we wouldn’t need to store every single person as an entry in a list. Dictionary also makes it easy to count the total number of healthy and sick people of each age. Inside the class Simulation, the constructor method creates a Community object and also a GraphicInterface object. It generates a random person to be the sick person and update masterDict. For all of the goTo methods, we generate a list of every possible community members who could go to that place. Then we generate a list of random length from the total list that represent the people who actually go to the place that day. We chose to use list to store the information because we needed to know information about each specific community member. Also it was easier to generate a random list from another list than from a dictionary. For goToSchool, goToWork and goToShop, a probability method is run on each healthy person to determine if they get sick. The probability methods generate a random number from 0 to 1 and, based on age and also whether it’s high or low probability, determine if the result is “sick” or “healthy”. If the person gets sick, we update both the masterDict and the list of people who were at the place that day. For goToHospital, the same process happens, but each sick person has a chance of getting healthy. Finally, the simulate method asks the user how many days to simulate and runs all the goTo functions for each day. Inside the class GraphicInterface, we created an introScreen, a main window and an endScreen. introScreen displays buttons that allow the user to choose the probabilities for each location. The main window displays the current total numbers of sick and healthy people and the current day. It also displays the numbers of sick and healthy people at each location. These numbers are based on the updated masterDict at the end of each day. This information is updated each day of the simulation. The endScreen displays the final numbers of sick and healthy people for each age group.
3. Currently all of our code runs correctly. We are also confident that all of the math is correct.
4. The user can run the simulation from the command line. The user mostly interacts with the window except when inputting the length of simulation into Terminal.  